! function(n) {
    "use strict";
    var t = function() {};
    t.prototype.initTooltipPlugin = function() {
        n.fn.tooltip && n('[data-toggle="tooltip"]').tooltip()
    }, t.prototype.initPopoverPlugin = function() {
        n.fn.popover && n('[data-toggle="popover"]').popover()
    }, t.prototype.initToastPlugin = function() {
        n.fn.toast && n('[data-toggle="toast"]').toast()
    }, t.prototype.initSlimScrollPlugin = function() {
        n.fn.slimScroll && n(".slimscroll").slimScroll({
            height: "auto",
            position: "right",
            size: "8px",
            touchScrollStep: 20,
            color: "#9ea5ab"
        })
    }, t.prototype.initFormValidation = function() {
        n(".needs-validation").on("submit", function(t) {
            return n(this).addClass("was-validated"), !1 !== n(this)[0].checkValidity() || (t.preventDefault(), t.stopPropagation(), !1)
        })
    }, t.prototype.initCustomModalPlugin = function() {
        n('[data-plugin="custommodal"]').on("click", function(t) {
            t.preventDefault(), new Custombox.modal({
                content: {
                    target: n(this).attr("href"),
                    effect: n(this).attr("data-animation")
                },
                overlay: {
                    color: n(this).attr("data-overlayColor")
                }
            }).open()
        })
    }, t.prototype.initCounterUp = function() {
        n(this).attr("data-delay") && n(this).attr("data-delay"), n(this).attr("data-time") && n(this).attr("data-time");
        n('[data-plugin="counterup"]').each(function(t, i) {
            n(this).counterUp({
                delay: 100,
                time: 1200
            })
        })
    }, t.prototype.initPeityCharts = function() {
        n('[data-plugin="peity-pie"]').each(function(t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                a = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                o = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("pie", {
                fill: e,
                width: a,
                height: o
            })
        }), n('[data-plugin="peity-donut"]').each(function(t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                a = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                o = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("donut", {
                fill: e,
                width: a,
                height: o
            })
        }), n('[data-plugin="peity-donut-alt"]').each(function(t, i) {
            n(this).peity("donut")
        }), n('[data-plugin="peity-line"]').each(function(t, i) {
            n(this).peity("line", n(this).data())
        }), n('[data-plugin="peity-bar"]').each(function(t, i) {
            var e = n(this).attr("data-colors") ? n(this).attr("data-colors").split(",") : [],
                a = n(this).attr("data-width") ? n(this).attr("data-width") : 20,
                o = n(this).attr("data-height") ? n(this).attr("data-height") : 20;
            n(this).peity("bar", {
                fill: e,
                width: a,
                height: o
            })
        })
    }, t.prototype.initKnob = function() {
        n('[data-plugin="knob"]').each(function(t, i) {
            n(this).knob({
                'format' : function (value) {
                    return value + '%';
                }
            })
        })
    }, t.prototype.initTippyTooltips = function() {
        0 < n('[data-plugin="tippy"]').length && tippy('[data-plugin="tippy"]')
    }, t.prototype.init = function() {
        this.initTooltipPlugin(), this.initPopoverPlugin(), this.initToastPlugin(), this.initSlimScrollPlugin(), this.initFormValidation(), this.initCustomModalPlugin(), this.initCounterUp(), this.initPeityCharts(), this.initKnob(), this.initTippyTooltips()
    }, n.Components = new t, n.Components.Constructor = t
}(window.jQuery),
function(o) {
    "use strict";
    var t = function() {
        this.$body = o("body"), this.$portletIdentifier = ".card", this.$portletCloser = '.card a[data-toggle="remove"]', this.$portletRefresher = '.card a[data-toggle="reload"]'
    };
    t.prototype.init = function() {
        var a = this;
        o(document).on("click", this.$portletCloser, function(t) {
            t.preventDefault();
            var i = o(this).closest(a.$portletIdentifier),
                e = i.parent();
            i.remove(), 0 == e.children().length && e.remove()
        }), o(document).on("click", this.$portletRefresher, function(t) {
            t.preventDefault();
            var i = o(this).closest(a.$portletIdentifier);
            i.append('<div class="card-disabled"><div class="card-portlets-loader"></div></div>');
            var e = i.find(".card-disabled");
            setTimeout(function() {
                e.fadeOut("fast", function() {
                    e.remove()
                })
            }, 500 + 5 * Math.random() * 300)
        })
    }, o.Portlet = new t, o.Portlet.Constructor = t
}(window.jQuery),
function(e) {
    "use strict";
    var t = function() {
        this.$body = e("body"), this.$window = e(window)
    };
    t.prototype._resetSidebarScroll = function() {
        e(".slimscroll-menu").slimscroll({
            height: "auto",
            position: "right",
            size: "8px",
            color: "#9ea5ab",
            wheelStep: 5,
            touchScrollStep: 20
        })
    }, t.prototype.initMenu = function() {
        var i = this;
        e(".button-menu-mobile").on("click", function(t) {
            t.preventDefault(), i.$body.toggleClass("sidebar-enable"), 768 <= i.$window.width() ? i.$body.toggleClass("enlarged") : i.$body.removeClass("enlarged"), i._resetSidebarScroll()
        }), e("#side-menu").metisMenu(), i._resetSidebarScroll(), e(".right-bar-toggle").on("click", function(t) {
            e("body").toggleClass("right-bar-enabled")
        }), e(document).on("click", "body", function(t) {
            0 < e(t.target).closest(".right-bar-toggle, .right-bar").length || 0 < e(t.target).closest(".left-side-menu, .side-nav").length || e(t.target).hasClass("button-menu-mobile") || 0 < e(t.target).closest(".button-menu-mobile").length || (e("body").removeClass("right-bar-enabled"), e("body").removeClass("sidebar-enable"))
        }), e(".navigation-menu a").each(function() {
            var t = window.location.href.split(/[?#]/)[0];
            this.href == t && (e(this).addClass("active"), e(this).parent().addClass("active"), e(this).parent().parent().addClass("in"), e(this).parent().parent().prev().addClass("active"), e(this).parent().parent().parent().addClass("active"), e(this).parent().parent().parent().parent().addClass("in"), e(this).parent().parent().parent().parent().parent().addClass("active"))
        }), e(".navbar-toggle").on("click", function(t) {
            e(this).toggleClass("open"), e("#navigation").slideToggle(400)
        }), e(".navigation-menu>li").slice(-2).addClass("last-elements"), e('.navigation-menu li.has-submenu a[href="#"]').on("click", function(t) {
            e(window).width() < 992 && (t.preventDefault(), e(this).parent("li").toggleClass("open").find(".submenu:first").toggleClass("open"))
        }), e(window).on("load", function() {
            e("#status").fadeOut(), e("#preloader").delay(350).fadeOut("slow")
        })
    }, t.prototype.initLayout = function() {
        768 <= this.$window.width() && this.$window.width() <= 1028 ? this.$body.addClass("enlarged") : 1 != this.$body.data("keep-enlarged") && this.$body.removeClass("enlarged")
    }, t.prototype.init = function() {
        var i = this;
        this.initLayout(), e.Portlet.init(), this.initMenu(), e.Components.init(), i.$window.on("resize", function(t) {
            t.preventDefault(), i.initLayout(), i._resetSidebarScroll()
        })
    }, e.App = new t, e.App.Constructor = t
}(window.jQuery),
function(t) {
    "use strict";
    window.jQuery.App.init()
}(), Waves.init();

$(document).ready(function() {
    "use strict";
    $("#basicwizard").bootstrapWizard(), $("#progressbarwizard").bootstrapWizard({
        onTabShow: function(t, r, a) {
            var o = (a + 1) / r.find("li").length * 100;
            $("#progressbarwizard").find(".bar").css({
                width: o + "%"
            })
        }
    })
    $("#basicTree").jstree({
        core: {
            themes: {
                responsive: !1
            }
        },
        types: {
            default: {
                icon: "mdi mdi-folder-plus"
            },
            file: {
                icon: "mdi mdi-file-document-box-outline"
            }
        },
        plugins: ["types"]
    }), $("#checkTree").jstree({
        core: {
            themes: {
                responsive: !1
            }
        },
        types: {
            default: {
                icon: "mdi mdi-folder-plus"
            },
            file: {
                icon: "mdi mdi-file-document-box-outline"
            }
        },
        plugins: ["types", "checkbox"]
    }), $("#dragTree").jstree({
        core: {
            check_callback: !0,
            themes: {
                responsive: !1
            }
        },
        types: {
            default: {
                icon: "mdi mdi-folder-plus"
            },
            file: {
                icon: "mdi mdi-file-document-box-outline"
            }
        },
        plugins: ["types", "dnd"]
    }), $("#ajaxTree").jstree({
        core: {
            check_callback: !0,
            themes: {
                responsive: !1
            },
            data: {
                url: function(e) {
                    return "#" === e.id ? "assets/data/ajax_roots.json" : "assets/data/ajax_children.json"
                },
                data: function(e) {
                    return {
                        id: e.id
                    }
                }
            }
        },
        types: {
            default: {
                icon: "mdi mdi-folder-plus"
            },
            file: {
                icon: "mdi mdi-file-document-box-outline"
            }
        },
        plugins: ["contextmenu", "dnd", "search", "state", "types", "wholerow"]
    })
});

;(function($) {
    $.pwstrength = function(password, increase=false) {
        var score = 0, length = password.length, upperCase, lowerCase, digits, nonAlpha;
        
        if(length < 5) score += 0;
        else if(length < 8) score += 5;
        else if(length < 12) score += 10;
        else if(length < 16) score += 15;
        else score += 20;
        
        lowerCase = password.match(/[a-z]/g);
        if(lowerCase) score += 1;
        
        upperCase = password.match(/[A-Z]/g);
        if(upperCase) score += 5;
        
        if(upperCase && lowerCase) score += 2;
        
        digits = password.match(/\d/g);
        if(digits && digits.length > 1) score += 5;
        
        nonAlpha = password.match(/\W/g)
        if(nonAlpha) score += (nonAlpha.length > 1) ? 15 : 10;
        
        if(upperCase && lowerCase && digits && nonAlpha) score += 15;

        if(password.match(/\s/)) score += 10;

        if (increase) {
            if(score < 10) return 0;
            if(score < 20) return 1;
            if(score < 35) return 2;
            if(score < 50) return 3;
        } else {
            if(score < 5) return 0;
            if(score < 10) return 1;
            if(score < 20) return 2;
            if(score < 30) return 3;
        }
        return 4;
    };
    
    function updateIndicator(event) {
        var options = event.data, klass;
        var strength = $.pwstrength($(this).val(), options.increase);
        console.log(options);
        klass = options.classes[strength];
        options.indicator.removeClass(options.indicator.data('pwclass'));
        options.indicator.data('pwclass', klass);
        options.indicator.addClass(klass);
        options.indicator.find(options.label).html(options.texts[strength]);
    }
    
    $.fn.pwstrength = function(options) {
        var options = $.extend({
            label: '.label',
            classes: ['pw-very-weak', 'pw-weak', 'pw-mediocre', 'pw-strong', 'pw-very-strong'],
            texts: ['very weak', 'weak', 'mediocre', 'strong', 'very strong']
        }, options || {});
        options.indicator = $('#' + this.data('indicator'));
        return this.keyup(options, updateIndicator);
    };
})(jQuery);